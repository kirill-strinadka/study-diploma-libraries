import {Slide} from "../../base-slide/Slide.js";


export const videoButtons = [
    { label: '‚ñ∂Ô∏è', command: 'play', title: 'Play' },
    { label: '‚è™ 2.5s', command: 'skipBackward', title: 'Skip backward' },
    { label: 'üîô', command: 'onset', title: 'Rewind to start' },
    { label: '‚è© 2.5s', command: 'skipForward', title: 'Skip forward' },
    { label: '+0.2x', command: 'speedUp', title: 'Speed up' },
    { label: '-0.2x', command: 'slowDown', title: 'Slow down' }
];

export const videoCommands = {
    play: (videoElement) => videoElement.play(),
    pause: (videoElement) => videoElement.pause(),
    onset: (videoElement) => { videoElement.currentTime = 0; },
    skipForward: (videoElement) => { videoElement.currentTime += 2.5; },
    skipBackward: (videoElement) => { videoElement.currentTime -= 2.5; },
    speedUp: (videoElement) => {videoElement.playbackRate =
        Math.min(3.0, videoElement.playbackRate + 0.2); },
    slowDown: (videoElement) => {videoElement.playbackRate =
        Math.max(0.2, videoElement.playbackRate - 0.2);}

    // –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—é–¥–∞
};

export function executeCommandToVideo(videoElement, command) {
    if (videoCommands[command[1]]) {
        videoCommands[command[1]](videoElement);
    } else {
        console.error(`–ö–æ–º–∞–Ω–¥–∞ "${command[1]}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞`);
    }
}


export class VideoSlide extends Slide {

    constructor(container, uiManager, videoSrc) {
        super(container);
        this.type = "video"
        this.container = container;

        this.uiManager = uiManager;
        this.toolManager = uiManager.getToolManager();

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π video-—ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        this.videoSrc = videoSrc
        this.slideVideoElement = this.container.querySelector("video") || this.createVideoElement();
        this.slideVideoElement.src = videoSrc; // –û–±–Ω–æ–≤–ª—è–µ–º src

        this.createTools(this.toolManager);

        this.instanceId = Math.random().toString(36).substring(2); // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        console.log(`VideoSlide created, instanceId: ${this.instanceId}`);

        this.initialVideoState = {
            currentTime: 0,
            playbackRate: 1.0,
            paused: true
        };
    }

    createVideoElement() {
        const video = document.createElement("video");
        video.style.width = "100%";
        video.style.height = "100%";
        this.container.appendChild(video);
        return video;
    }

    _recreateCanvas() {
        this.slideVideoElement.currentTime = this.initialVideoState.currentTime;
        this.slideVideoElement.playbackRate = this.initialVideoState.playbackRate;
        this.slideVideoElement.pause();
    }

    createTools(toolManager) {

        toolManager.clearTools()

        videoButtons.forEach(({ label, command, title }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
            let button = toolManager.toolsContainer.querySelector(`button[data-command="${command}"]`);

            if (!button) {
                // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                button = document.createElement('button');
                console.log('–ö–Ω–æ–ø–∫–∞ ', command, title);
                button.title = title;
                button.setAttribute('data-command', command); // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                button.appendChild(document.createTextNode(label));

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                button.onclick = () => {
                    console.log(`Button clicked, instanceId: ${this.instanceId}, this:`, this);
                    if (command === 'play' || command === 'pause') {
                        this.togglePlayPause(button);
                    } else {
                        this._prepareCommandAndExecute(command);
                    }
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                toolManager.toolsContainer.appendChild(button);
            }
        });

        // const toolsConfig = videoButtons.map(({ label, command, title }) => ({
        //     label,
        //     title,
        //     action: () => {
        //         if (this.recording) {
        //             this.prepareCMD(command);
        //         }
        //         executeCommandToVideo(this.slideVideoElement, command);
        //     },
        // }));
        //
        // toolManager.registerTools(toolsConfig);
    }

    togglePlayPause = (button) => { // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Play/Pause
        if (this.isPlaying) {
            button.textContent = '‚ñ∂Ô∏è'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ Play
            this._prepareCommandAndExecute('pause');
        } else {
            button.textContent = '‚è∏Ô∏è'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ Pause
            this._prepareCommandAndExecute('play');
        }
        this.isPlaying = !this.isPlaying; // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    _prepareCommandAndExecute(action, options) {
        console.log('Slide._prepareCommandAndExecute called on:', this);
        super._prepareCommandAndExecute(action, options)
    }


    render() {
        // –í–∏–¥–µ–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —ç–ª–µ–º–µ–Ω—Ç
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    startRecording() {
        // this.isPlaying = false;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ
        this.initialVideoState = {
            currentTime: this.slideVideoElement.currentTime,
            playbackRate: this.slideVideoElement.playbackRate,
            paused: this.slideVideoElement.paused
        };

        super.startRecording(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç recording, startTime –∏ –æ—á–∏—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
        // this._recreateCanvas(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
    }

    stopRecording() {
        super.stopRecording(); // –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç recording –∏ startTime
        // this.slideVideoElement.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        // this.isPlaying = false;
        return this;
    }

    play() {
        this._recreateCanvas(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (–≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        super.play(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    }

    _executeCommand(command) {

        executeCommandToVideo(this.slideVideoElement, command)
        // if (command[1] === 'play') this.isPlaying = true;
        // if (command[1] === 'pause') this.isPlaying = false;

    }

}

