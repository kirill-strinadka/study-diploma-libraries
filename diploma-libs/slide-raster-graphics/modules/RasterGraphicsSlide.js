import {Slide} from "../../base-slide/Slide.js";
import {denorm, norm} from "./utils.js";

// –ú–∞—Å—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–ª—â–∏–Ω—ã –ª–∏–Ω–∏–π —Ä—É—á–∫–∏
export const penWidths = [
    { label: '‚ùò', width: 3, title: 'thin pen' },
    { label: '‚ùô', width: 5, title: 'medium pen' },
    { label: '‚ùö', width: 7, title: 'thick pen' }
];

// –ú–∞—Å—Å–∏–≤ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ü–≤–µ—Ç–æ–≤ —Ä—É—á–∫–∏
export const penColors = [
    { label: 'üü•', color: 'red', title: 'red color' },
    { label: 'üü©', color: 'green', title: 'green color' },
    { label: 'üü¶', color: 'blue', title: 'blue color' }
];

export class RasterGraphicsSlide extends Slide {
    constructor(container, uiManager, backgroundImage) {
        super(container, { width: 600, height: 400 });
        this.type = 'raster';
        this.backgroundImage = backgroundImage;

        this.uiManager = uiManager;
        this.toolManager = uiManager.getToolManager();
        this.startTime = null;
        this.penColor = 'black';
        this.penWidth = 1;

        this._recreateCanvas()
        this.createTools(this.toolManager);
    }

    createTools(toolManager) {
        const toolsConfig = [
            ...penColors.map(({ label, color, title }) => ({
                label,
                title,
                action: () => (this.penColor = color),
            })),
            ...penWidths.map(({ label, width, title }) => ({
                label,
                title,
                action: () => (this.penWidth = width),
            })),
        ];
        toolManager.registerTools(toolsConfig);
    }

    _recreateCanvas() {
        this.clearCanvas()
        this.canvas = document.createElement('canvas');
        this.canvas.width = this.settings.width;
        this.canvas.height = this.settings.height;
        this.context = this.canvas.getContext('2d');
        this.container.appendChild(this.canvas);
        this._setupBackground();
    }

    _setupBackground() {
        if (this.backgroundImage) {
            const img = new Image();
            img.onload = () => this.context.drawImage(img, 0, 0, this.settings.width, this.settings.height);
            img.src = this.backgroundImage;
        }
    }

    render() {
        // –û—á–∏—Å—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥
        this.context.clearRect(0, 0, this.settings.width, this.settings.height);
        this._setupBackground();
        this.commands.forEach(cmd => this._executeCommand(cmd));
    }

    startRecording() {
        this.recording = true;

        this.startTime = new Date().getTime();
        this.uiManager.penColor = 'red';
        this.uiManager.penWidth = '3';

        this._recreateCanvas()
        this.canvas.addEventListener('mousedown', this._onMouseDown);

        // this.prepareCMD('closePath');
        // this.canvas.removeEventListener('mousemove', this._onMouseMove);
        // this.canvas.removeEventListener('mousedown', this._onMouseDown);
        // this.clearCanvas()
    }

    stopRecording() {
        this.recording = false;
        this.canvas.removeEventListener('mousedown', this._onMouseDown);
        return this;
    }

    play22() {
        if (this.currentTimeout) {
            clearTimeout(this.currentTimeout); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        }
        this._recreateCanvas();
        // this.render(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        let i = 0;
        const playNext = () => {
            if (i < this.commands.length) {
                this._executeCommand(this.commands[i]);
                i++;
                if (i < this.commands.length) {
                    const [currentTime] = this.commands[i - 1];
                    const [nextTime] = this.commands[i];
                    const delay = nextTime - currentTime || 0; // –ò–∑–±–µ–≥–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫
                    this.currentTimeout = setTimeout(playNext, delay);
                }
            }
        };
        playNext();
    }

    // todo - –≤—ã–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    play() {
        if (this.currentTimeout) {
            clearTimeout(this.currentTimeout); // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        }
        this._recreateCanvas();
        // this.render(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        if (this.commands.length === 0) return; // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

        let i = 0;
        const playNext = () => {
            if (i < this.commands.length) {
                const cmd = this.commands[i];
                this._executeCommand(cmd);
                i++;
                if (i < this.commands.length) {
                    // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
                    const currentTime = cmd[0];
                    const nextTime = this.commands[i][0];
                    const delay = nextTime - currentTime;
                    this.currentTimeout = setTimeout(playNext, delay);
                }
            }
        };

        // –ü–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî —ç—Ç–æ –≤—Ä–µ–º—è –æ—Ç –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏ –¥–æ –ø–µ—Ä–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        const initialDelay = this.commands[0][0];
        this.currentTimeout = setTimeout(playNext, initialDelay);
    }

    // todo - –≤—ã–Ω–µ—Å—Ç–∏ –≤ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
    playOld() {
        this._recreateCanvas()

        this._executeCommand = this._executeCommand.bind(this);
        this.iCMD = 0;
        this.lastCMD = this.commands.length-1;

        const playNext = () => {
            console.log ('–ö–æ–º–º–∞–Ω–¥ –≤ —Å–ª–∞–π–¥–µ', this.commands.length);
            if (this.iCMD < this.lastCMD) {
                let cmd0 = this.commands[this.iCMD];
                this.interval = cmd0[0];
                this.startTime = (new Date ()).getTime();
                this.setTimeID = setTimeout (this.nextCMD, this.interval);
            }
        };

        playNext();
    }

    nextCMD = () => {
        console.log (this.iCMD);
        let cmd0 = this.commands[this.iCMD];
        this._executeCommand(cmd0);
        this.iCMD ++;
        if (this.iCMD < this.lastCMD) {
            let t0 = cmd0[0];
            let cmd1 = this.commands[this.iCMD];
            let t1 = cmd1[0];
            this.interval = t1-t0;
            this.startTime = (new Date ()).getTime();
            this.setTimeID = setTimeout (this.nextCMD, this.interval);
        }
    }

    _onMouseDown = (event) => {
        const start = [event.offsetX, event.offsetY];


        this.prepareCMD('beginPath');
        this.prepareCMD('setPenColor', this.penColor);
        this.prepareCMD('setPenWidth', this.penWidth);
        this.prepareCMD('moveTo', norm(start, this.settings.width, this.settings.height));

        // this.commands.push(['beginPath', start]);

        this.canvas.addEventListener('mousemove', this._onMouseMove);
        this.canvas.addEventListener('mouseup', this._onMouseUp);
    };

    _onMouseMove = (event) => {
        // this.commands.push(['lineTo', [event.offsetX, event.offsetY]]);
        // this.render(); // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å

        let XY = [event.offsetX, event.offsetY];
        this.prepareCMD('lineTo', norm(XY, this.settings.width, this.settings.height));
    };

    _onMouseUp = () => {
        // this.commands.push(['closePath']);
        // this.canvas.removeEventListener('mousemove', this._onMouseMove);
        // this.canvas.removeEventListener('mouseup', this._onMouseUp);

        this.prepareCMD('closePath');
        this.canvas.removeEventListener('mousemove', this._onMouseMove);
    };

    prepareCMD = (action, options) => {
        let command = [];
        let date = new Date();
        let t1 = date.getTime();
        command[0] = t1 - this.startTime;
        command[1] = action;
        command[2] = options;
        this.commands.push(command);

        // –ß—Ç–æ–±—ã —Å—Ä–∞–∑—É –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–æ—Å—å –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∫–æ–º–∞–Ω–¥
        this._executeCommand(command);
    }

    // _executeCommand([action, args]) {
    //     switch (action) {
    //         case 'beginPath':
    //             this.context.beginPath();
    //             this.context.moveTo(...args);
    //             break;
    //         case 'lineTo':
    //             this.context.lineTo(...args);
    //             this.context.stroke();
    //             break;
    //         case 'closePath':
    //             this.context.closePath();
    //             this.context.stroke();
    //             break;
    //     }
    // }

    _executeCommand(command) {
        executeCommandToGraphicSlide(
            this.context,
            command,
            this.settings.width,
            this.settings.height
        )
    }

}

export const slideCommands = {

    beginPath: (slideContext, options) => {
        slideContext.beginPath();
    },

    moveTo: (slideContext, options, width1, height1) => {
        let XY = denorm(options, width1, height1);
        slideContext.moveTo(XY[0], XY[1]);
    },

    lineTo: (slideContext, options, width1, height1) => {
        let XY = denorm(options, width1, height1);
        slideContext.lineTo(XY[0], XY[1]);
        slideContext.stroke();
    },

    closePath: (slideContext, options) => {
        slideContext.closePath();
    },

    setPenColor: (slideContext, options) => {
        slideContext.strokeStyle = options;
    },

    setPenWidth: (slideContext, options) => {
        slideContext.lineWidth = options;
    },

    // –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—é–¥–∞
};

// todo - –º–± –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–ª–∞–π–¥–∞, —á—Ç–æ–±—ã —Å—é–¥–∞ –µ–≥–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–∞–¥ –Ω–∏–º –¥–µ–π—Å—Ç–≤–∏—è. (–º–± —Å–∞–º SlideRecord –ø–æ–¥–æ–π–¥–µ—Ç)
export function executeCommandToGraphicSlide(slideContext, command, width1, height1) {
    let action = command[1];  // –ó–¥–µ—Å—å –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, moveTo)
    let options = command[2]; // –ó–¥–µ—Å—å –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ü–∏–∏

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ slideCommands
    if (slideCommands[action]) {
        // –ü–µ—Ä–µ–¥–∞–µ–º context, options –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥—É
        slideCommands[action](slideContext, options, width1, height1);
    } else {
        console.error(`–ö–æ–º–∞–Ω–¥–∞ "${action}" –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞`);
    }
}