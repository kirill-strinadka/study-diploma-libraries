import {Slide} from "./Slide.js";
import {RecordingSlide} from "../base-slide/RecordingSlide.js";
import PlaybackVideoSlide from "./PlaybackVideoSlide.js";


export const videoButtons = [
    { label: '‚ñ∂Ô∏è', command: 'play', title: 'Play' },
    { label: '‚è™ 2.5s', command: 'skipBackward', title: 'Skip backward' },
    { label: 'üîô', command: 'onset', title: 'Rewind to start' },
    { label: '‚è© 2.5s', command: 'skipForward', title: 'Skip forward' },
    { label: '+0.2x', command: 'speedUp', title: 'Speed up' },
    { label: '-0.2x', command: 'slowDown', title: 'Slow down' }
];

export default class RecordingVideoSlide extends RecordingSlide {

    constructor(container, toolsContainer, videoSrc, ...restArgs) {
        super(container, toolsContainer, new PlaybackVideoSlide(container, videoSrc, []));
        this.playbackSlide = new PlaybackVideoSlide(container, videoSrc, [])

        this.type = "video"

        this.createTools(this.toolManager);
    }


    getCreationArgs() {
        this.playbackSlide.getCreationArgs()
    }

    _toInitialState() {
        this.playbackSlide._toInitState();
    }

    createTools(toolManager) {

        toolManager.clearTools()

        videoButtons.forEach(({ label, command, title }) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
            let button = toolManager.toolsContainer.querySelector(`button[data-command="${command}"]`);

            if (!button) {
                // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                button = document.createElement('button');
                console.log('–ö–Ω–æ–ø–∫–∞ ', command, title);
                button.title = title;
                button.setAttribute('data-command', command); // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                button.appendChild(document.createTextNode(label));

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                button.onclick = () => {
                    if (command === 'play' || command === 'pause') {
                        this.togglePlayPause(button);
                    } else {
                        this._prepareCommandAndExecute(command);
                    }
                };

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                toolManager.toolsContainer.appendChild(button);
            }
        });

        // todo - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ –∫–∞–∫ –≤ —Ä–∞—Å—Ç—Ä–æ–≤–æ–º —Å–ª–∞–π–¥–µ
        // const toolsConfig = videoButtons.map(({ label, command, title }) => ({
        //     label,
        //     title,
        //     action: () => {
        //         if (this.recording) {
        //             this.prepareCMD(command);
        //         }
        //         executeCommandToVideo(this.slideVideoElement, command);
        //     },
        // }));
        //
        // toolManager.registerTools(toolsConfig);
    }

    togglePlayPause = (button) => { // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å Play/Pause
        if (this.isPlaying) {
            button.textContent = '‚ñ∂Ô∏è'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ Play
            this._prepareCommandAndExecute('pause');
        } else {
            button.textContent = '‚è∏Ô∏è'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ Pause
            this._prepareCommandAndExecute('play');
        }
        this.isPlaying = !this.isPlaying; // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    render() {
        // –í–∏–¥–µ–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    }

    startRecording() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ
        this.playbackSlide._saveInitialVideoState();

        super.startRecording();
    }

    stopRecording() {
        super.stopRecording();
        return this.getSlideDTO();
    }

    play() {
        this._toInitialState(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º (–≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º)
        super.play(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    }

    getContent() {
        return this.playbackSlide.getContent(); // –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ –∏–ª–∏ —Å–∞–º–æ –≤–∏–¥–µ–æ
    }

    getType() {
        this.playbackSlide.getType();
    }
}

